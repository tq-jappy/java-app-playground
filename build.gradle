buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.flywaydb.flyway' version '5.2.4'
    id 'nu.studer.jooq' version '3.0.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-jooq')
    implementation('org.flywaydb:flyway-core')
    implementation('org.springframework.session:spring-session-data-redis')
    compile('org.mariadb.jdbc:mariadb-java-client')

    annotationProcessor('org.projectlombok:lombok')
    compileOnly('org.projectlombok:lombok')

    jooqRuntime project(':custom-generator')
    jooqRuntime('org.mariadb.jdbc:mariadb-java-client')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

flyway {
    url = 'jdbc:mysql://127.0.0.1:3306/test'
    user = 'root'
    password = 'root'
}

jooq {
    main(sourceSets.main) {
        jdbc {
            url = 'jdbc:mariadb://127.0.0.1:3306/test'
            user = 'root'
            password = 'root'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                includes = '.*'
                excludes = 'flyway_schema_history'
                inputSchema = 'test'
            }
            strategy {
                // name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                name = 'com.example.demo.codegen.CustomGeneratorStrategy'
            }
            generate {
            }
            target {
                packageName = 'com.example.demo.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

// removes the task dependency from compileJava to generateMainJooqSchemaSource
project.tasks.getByName('compileJava').dependsOn -= 'generateMainJooqSchemaSource'
