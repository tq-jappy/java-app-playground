/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Indexes;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.Test;
import com.example.demo.jooq.tables.records.ItemsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = -799281588;

    /**
     * The reference instance of <code>test.items</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>test.items.id</code>.
     */
    public final TableField<ItemsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.items.name</code>.
     */
    public final TableField<ItemsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * Create a <code>test.items</code> table reference
     */
    public Items() {
        this(DSL.name("items"), null);
    }

    /**
     * Create an aliased <code>test.items</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>test.items</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Items(Table<O> child, ForeignKey<O, ItemsRecord> key) {
        super(child, key, ITEMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemsRecord> getPrimaryKey() {
        return Keys.KEY_ITEMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemsRecord>>asList(Keys.KEY_ITEMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }
}
